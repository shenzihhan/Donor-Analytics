# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zZUqRudLhPi-QfD0grgHu7_CSVXIs5Lr
"""

import streamlit as st
import gdown
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.ticker as mtick
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.preprocessing import StandardScaler

st.markdown(
    """
    <style>
    body {
        background-image: url('https://example.com/background.jpg');
        background-size: cover;
        background-position: center center;
        background-repeat: no-repeat;
    }

    .stButton > button {
        background-color: #FF6347;
        color: white;
        font-size: 16px;
        border-radius: 8px;
        padding: 10px 20px;
    }

    .stTextInput input {
        border-radius: 5px;
        padding: 10px;
        background-color: #f7f7f7;
    }

    .stFileUploader button {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        font-size: 14px;
        border-radius: 5px;
    }
    </style>
    """, unsafe_allow_html=True
)

# Google Drive file link
file_id = "1-qeNb8PKlJhCaralGLEwGTLFgqpW-LfR"
url = f"https://drive.google.com/uc?id={file_id}"
output = 'donor_data.csv'

# Download the file
gdown.download(url, output, quiet=False)

# Read the data
df = pd.read_csv(output)

# Preprocessing
df['Donation Indicator'] = df['Donation Indicator'].map({True: 1, False: 0, 'TRUE': 1, 'FALSE': 0})
df['Event Participation'] = df['Event Participation'].map({'None': 0, 'Low': 1, 'Medium': 2, 'High': 3})
df['axio_segment_number'] = df['axio_segment_number'].astype(int)

# Segment and strategy maps
segment_map = {
    0: "Super Loyal Donors",
    1: "High-Potential Regulars",
    2: "Engaged Mid-tier Donors",
    3: "Modest Donors",
    4: "Returning Donors",
    5: "Recent First-time Donors",
    6: "Digital-Engaged Non-Donors",
    7: "Interested Non-Donors",
    8: "Event-Only Non-Donors",
    9: "Infrequent Low-Value Donors",
    10: "Lapsed Donors",
    11: "Passive Non-Engaged",
    12: "Wealthy Non-Donors",
    13: "High-Impact Infrequent Donors",
    14: "Fully Disengaged"
}

strategy_map = {
    "Super Loyal Donors": "Cultivate deeper relationships to sustain contributions",
    "High-Potential Regulars": "Encourage incremental upsell and consistency",
    "Engaged Mid-tier Donors": "Maintain steady support and nurture deeper loyalty",
    "Modest Donors": "Encourage them to increase donation size or frequency",
    "Returning Donors": "Strengthen renewed relationship with targeted outreach",
    "Recent First-time Donors": "Nurture into repeat donors with welcome campaigns",
    "Digital-Engaged Non-Donors": "Convert engaged prospects into first-time donors",
    "Interested Non-Donors": "Encourage a first donation with targeted appeals",
    "Event-Only Non-Donors": "Convert event enthusiasm into donation behavior",
    "Infrequent Low-Value Donors": "Increase donation consistency and average gift size",
    "Lapsed Donors": "Reactivate by highlighting past impact and new initiatives",
    "Passive Non-Engaged": "Attempt basic awareness campaigns to prompt engagement",
    "Wealthy Non-Donors": "Targeted philanthropic messaging to inspire initial giving",
    "High-Impact Infrequent Donors": "Encourage them to donate more frequently or set recurring gifts",
    "Fully Disengaged": "Final attempt to reach or confirm removal"
}

# Choose features and target column
features = [
    'Donation Indicator', 'Donation Frequency', 'Average Donation',
    'Digital Engagement Score', 'Last Donation Recency',
    'Wealth Index', 'Event Participation'
]

target = 'axio_segment_number'

# Check if the target column exists
if target not in df.columns:
    st.error(f"Target column '{target}' does not exist. Please check the data columns.")
else:
    X = df[features]
    y = df[target]

    # Split the dataset into training and testing sets (80% training, 20% testing)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

    # Train the RandomForest Classifier model
    rf = RandomForestClassifier(n_estimators=100, random_state=42, class_weight='balanced')
    rf.fit(X_train, y_train)

    # Predict the "Average Donation"
    donation_target = "Average Donation"
    donation_features = [
        'Donation Frequency',
        'Digital Engagement Score',
        'Last Donation Recency',
        'Wealth Index',
        'Event Participation'
    ]

    # Clean the data by dropping rows with missing values
    df_clean = df[donation_features + [donation_target]].dropna()

    # Standardize the features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(df_clean[donation_features])

    # Train the RandomForest Regressor model
    rfr = RandomForestRegressor(random_state=42)
    rfr.fit(X_scaled, df_clean[donation_target])

# Define the prediction function
def predict_segment(df, rf_model, rfr_model, segment_map, strategy_map):
    df['Donation Indicator'] = df['Donation Indicator'].map({True: 1, False: 0, 'TRUE': 1, 'FALSE': 0})
    df['Event Participation'] = df['Event Participation'].map({'None': 0, 'Low': 1, 'Medium': 2, 'High': 3})

    X_columns_segment = [
        'Donation Indicator', 'Donation Frequency', 'Average Donation',
        'Digital Engagement Score', 'Last Donation Recency', 'Wealth Index', 'Event Participation'
    ]
    X_segment = df[X_columns_segment]
    df["Predicted_Segment"] = rf_model.predict(X_segment)
    df["Segment_Name"] = df["Predicted_Segment"].map(segment_map)

    X_columns_amount = [
        "Donation Frequency", "Digital Engagement Score", "Last Donation Recency",
        "Wealth Index", "Event Participation"
    ]
    X_amount = df[X_columns_amount]
    df["Donation Amount Predicted"] = rfr_model.predict(X_amount).round(2)

    df["Marketing_Strategy"] = df["Segment_Name"].map(strategy_map)
    return df

# Streamlit app title
st.title("Grand Canyon Council Donation Prediction Tool")

# File upload section
uploaded_file = st.file_uploader("Upload New Donor Data (CSV)", type="csv")

if uploaded_file is not None:
    # Read the uploaded CSV file
    new_data = pd.read_csv(uploaded_file)

    # Run the prediction function
    new_data = predict_segment(new_data, rf, rfr, segment_map, strategy_map)

    # Calculate total donation columns before groupby
    new_data["Total Donation"] = new_data["Average Donation"] * new_data["Donation Frequency"]
    new_data["Donation Amount Predicted (Annual)"] = new_data["Donation Amount Predicted"] * new_data["Donation Frequency"]

    # Display predicted data
    st.write("Predicted Donor Data with Segments, Donation Amount Predicted and Marketing Strategies", new_data)

    # Allow users to download the full predicted data
    full_predictions_csv = new_data.to_csv(index=False).encode('utf-8')
    st.download_button("Download Full Predicted Data", full_predictions_csv, "predicted_data.csv", "text/csv")

    # Segment Distribution Dashboard
    fig1 = px.pie(new_data, names="Segment_Name", title="Donor Count by Segment")
    fig2 = px.pie(new_data, names="Segment_Name", values="Donation Amount Predicted (Annual)", title="Total Donation Potential by Segment")

    st.plotly_chart(fig1)
    st.plotly_chart(fig2)

    # Segment Strategy Based on Donor Segmentation
    strategy_df = new_data.groupby("Segment_Name").agg(
        Donor_Count=("DonorID", "count"),
        Avg_Predicted_Donation=("Donation Amount Predicted (Annual)", "mean")
    ).reset_index()
    strategy_df["Strategy"] = strategy_df["Segment_Name"].map(strategy_map)

    fig3 = px.scatter(strategy_df, x="Donor_Count", y="Avg_Predicted_Donation",
                      color="Segment_Name", size="Avg_Predicted_Donation",
                      hover_data=["Strategy"], title="Segment Strategy Mapping")
    st.plotly_chart(fig3)

    # Donor Conversion Funnel (Non-donors predicted to convert)
    non_donors = new_data[new_data["Donation Indicator"] == 0]
    converted = non_donors[non_donors["Donation Amount Predicted (Annual)"] > 0]

    funnel_data = {
        "Stage": ["Non-Donors", "Predicted to Convert"],
        "Count": [len(non_donors), len(converted)]
    }
    funnel_df = pd.DataFrame(funnel_data)

    fig5 = go.Figure(go.Funnel(
        y=funnel_df["Stage"],
        x=funnel_df["Count"],
        textposition="inside",
        textinfo="value+percent initial",
        marker=dict(
            color=["#1f77b4", "#ff7f0e"]
        )
    ))

    fig5.update_layout(
        title="Donor Conversion Funnel (Predicted)",
        title_x=0.5,
        template="plotly_dark",
    )
    st.plotly_chart(fig5)


    # Filter potential non-donors predicted to convert
    potential_converts = new_data[
        (new_data["Donation Indicator"] == 0) &
        (new_data["Donation Amount Predicted (Annual)"] > 0)
    ].copy()

    # Sort by predicted donation amount
    potential_converts = potential_converts.sort_values(by="Donation Amount Predicted (Annual)", ascending=False)

    # Display potential non-donors who may donate next year
    st.write("Potential Conversion List", potential_converts)

    # Export potential non-donors who may donate next year
    potential_converts_csv = potential_converts.to_csv(index=False).encode('utf-8')
    st.download_button("Download Potential Converters (Non-Donors)", potential_converts_csv, "potential_converters.csv", "text/csv")

    # High-Potential Donors List (those predicted to donate more than $1000 next year)
    high_value_df = new_data[new_data["Donation Amount Predicted (Annual)"] > 1000]

    # Display high-potential donors
    st.write("High-Potential Donors List", high_value_df)

    # Export high-potential donors list
    high_value_df_csv = high_value_df.to_csv(index=False).encode('utf-8')
    st.download_button("Download High-Potential Donors List", high_value_df_csv, "high_potential_donors.csv", "text/csv")

    # Total goal visualization
    summary = new_data.groupby("Segment_Name").agg(
    Donor_Count=("DonorID", "count"),
    Total_Donation_This_Year=("Total Donation", "sum"),
    Total_Predicted_Donation_Next_Year=("Donation Amount Predicted (Annual)", "sum")).reset_index()

    # Debugging: Check if the summary DataFrame has the correct columns
    st.write("Summary DataFrame", summary)

    # Now compute Total Donation This Year
    Total_Donation_This_Year = summary["Total_Donation_This_Year"].sum()
    project_target = Total_Donation_This_Year * 1.025
    growth_target = Total_Donation_This_Year * 1.10
    fig, ax = plt.subplots(figsize=(12, 6))
    bottom = 0
    for _, row in summary.iterrows():
        ax.bar("All Segments", row["Total_Predicted_Donation_Next_Year"], bottom=bottom, label=row["Segment_Name"])
        bottom += row["Total_Predicted_Donation_Next_Year"]

    ax.axhline(y=Total_Donation_This_Year, color='gray', linestyle=':', linewidth=2, label='Actual Total This Year')
    ax.axhline(y=project_target, color='blue', linestyle='--', linewidth=2, label='2.5% Project Goal')
    ax.axhline(y=growth_target, color='red', linestyle='--', linewidth=2, label='10% Growth Target')

    gap_25 = max(project_target - summary["Total_Predicted_Donation_Next_Year"].sum(), 0)
    gap_10 = max(growth_target - summary["Total_Predicted_Donation_Next_Year"].sum(), 0)

    ax.text(0, project_target + 50000, f"Gap to 2.5% Target: ${gap_25:,.0f}", color='blue', fontsize=10)
    ax.text(0, growth_target + 50000, f"Gap to 10% Target: ${gap_10:,.0f}", color='red', fontsize=10)

    ax.set_ylabel("Total Predicted Donation ($)")
    ax.yaxis.set_major_formatter(mtick.StrMethodFormatter('${x:,.0f}'))
    ax.set_title("Predicted Donation by Segment with Growth Targets vs Actual")
    ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.tight_layout()
    st.pyplot(fig)

